#########
# Step 1
Code affected: none
Created this file.

#########
# Step 2
Code affected: all .java files
Reformatted using the Google Java style formatter.

#########
# Step 3
Code affected: Fish.turnAround
Flaw: unnecessary if, leading to duplicate code.
Fix: replaced if statement with a single assignment statement.

I realised that there are a lot of changes I need to make from the previous revision as
most of the revisions only utilised the Inspect Code function of Android Studio.

From this experience, I realised that I need to draw a memory model and understand thoroughly,
what each and every code are doing in order to proceed. So, below is the better revision I made.

#########
# Step 4
Code affected: Items.java
Flaw: Apparently, some of the items like bubble, seaweeds, fish, and hungryfish have methods that
are in common.
Fix: Hence, instead of repeating it in every class, we will make an abstract class Item to have the
abstract methods, variables and constructors.

#########
# Step 5
Code affected: Items.java
Flaw: No variable has been added.
Fix: Since all items have a coordinate somewhere, I am adding 2 variables int x

#########
# Step 6
Code affected: Items.java
Flaw: No abstract constructor has been added
Fix: Adding a Items constructor with variable int x, and int y and a method body


#########
# Step 7
Code affected: Items.java
Flaw: No methods have been added yet
Fix: Add the abstract method draw(Canvas canvas) and moveItem() in Items.java


#########
# Step 8
Code affected: Items.java
Flaw: No abstract constructor has been added
Fix: Adding a Items constructor with variable int x, and int y and a method body


#########
# Step 9
Code affected: Bubble.java
Flaw: Bubble is a an item in a Fish tank which can be inherited from Items.
Fix: Extend Bubble to Items.

#########
# Step 10
Code affected: Bubble.setLocation()
Flaw: Bubble.setLocation is no longer useful as we change the coordinate system.
Fix: Erased it

#########
# Step 11
Code affected: Bubble constructor
Flaw: Use the abstract constructor and inherit it to bubble
Fix: Use the abstract constructor and inherit it to bubble

#########
# Step 12
Code affected: Bubble.draw() and Bubble.drawString()
Flaw: Since the method drawString() is a very simple helper function for draw(), we
can simply merge them together
Fix: Put the body of drawString() to draw() with few modifications to fir the method.

#########
# Step 13
Code affected: Bubble.floatStraight(), Bubble.floatLeft(), and Bubble.floatRight()
Flaw:
1. Since the code for the difference appearance of the bubbles are the same,
we can merge this process together.
2. Since we can manage the randomness of the number to manage whether the bubble should
go to the right or the left or straight up, we can simply merge these processes together.
Fix: Merge these together into a simpler if conditions.

#########
# Step 14
Code affected: Seaweed.java
Flaw: Seaweed is an item in the Tank, we can extend Items to Seaweed
Fix: Extend it.

#########
# Step 15
Code affected: Seaweed.my_curr_row and Seaweed.my_curr_col
Flaw: Since we have an abstract class Items, we can use the abstract constructors to
save the x and y coordinate.
Fix: So, we delete it.

#########
# Step 16
Code affected: Seaweed.setLocation()
Flaw: There's no longer a need for this method
Fix: Erase it

#########
# Step 17
Code affected: Seaweed constructor
Flaw: Seaweed constructors need to use abstract constructor Item.
Fix: call super in it.

#########
# Step 18
Code affected: Seaweed.draw()
Flaw: There are still old variables that in the method draw()
Fix: Change it my_curr_row and my_curr_col to x and y respectively.

#########
# Step 19
Code affected: Seaweed.draw()
Flaw: The if statements can be simplify further, so it is more effecient.
Fix: Change the if conditions and body to a better one.

#########
# Step 20
Code affected: Seaweed.wave()
Flaw: To align ourselves with the abstract class, we need a method called moveItem()
to be implemented, which will move the item and wave() do exactly the same.
Fix: Change the name from wave() to moveItem()

#########
# Step 21
Code affected: Fish.java
Flaw: Fish is an item in the fish tank, so it needs to be inherited from Items
Fix: extends Fish to Items

#########
# Step 22
Code affected: Fish.r and Fish.c
Flaw: These are no longer needed as we can simply apply super on the constructor to
store the coordinates value.
Fix: Erase variable r and c


#########
# Step 23
Code affected: Fish.setLocation()
Flaw: It is no longer needed due to a different coordinate system that we make
Fix: Erase it


#########
# Step 24
Code affected: Fish.blowBubble()
Flaw: We need to modify blowBubble() according to the new implementation of Bubble
Fix: Modifying the old bu


#########
# Step 25
Code affected: Fish.drawString()
Flaw: Since drawString() is just a helper function with one statement for draw(), we can
combine them together.
Fix: Delete drawString() and move the body to draw().


#########
# Step 26
Code affected: Fish.move()
Flaw: Since we want Fish to inherit the abstract method Items, we need to implement moveItem()
Fix: Change the name of move() to moveItem()

#########
# Step 27
Code affected: HungryFish.java
Flaw: Since HungryFish and Fish share a lot of similarities, we can extend them.
Fix: Extend Fish to HungryFish

#########
# Step 28
Code affected: HungryFish.r, HungryFish.c, HungryFish.goingRight, and paintText
Flaw: These variables are redundant as we are inheriting it from Fish
Fix: So, we can simply erase it.

#########
# Step 29
Code affected: HungryFish Constructor
Flaw: it needs to inherit the super to follow the abstract method
Fix: Call super(x, y) in the body and add the parameter int x and y in the constructor.

#########
# Step 30
Code affected: HungryFish.setLocation()
Flaw: Not needed as we are changing the coordinate system
Fix: Erase it


#########
# Step 31
Code affected: HungryFish.blowBubble(), reverseAppearance(), turnAround(), draw(), drawString(), move()
Flaw: Since all of these methods can be inherited directly from the parent class Fish, the above methods are redundant.
Fix: Erase all.


#########
# Step 32
Code affected: FishTankManager.myLittleFishies
Flaw: the name myLittleFishies doesn't represent the items it stores in it.
Fix: Change to fishTankItems


#########
# Step 33
Code affected: FishTankManager.myLittleFishies
Flaw: Instead of using Object[][], List is more efficient
Fix: Change it to a list.


#########
# Step 34
Code affected: FishTankManager.addBubbles
Flaw: This is needed as new bubbles can be added later during the simulation.
Fix: Add a new ArrayList newItems


#########
# Step 35
Code affected: FishTankManager.gridWidth and gridHeight
Flaw: Since the gridWidth and gridHeight is always fixed, we can make it final
Fix: Make it final.

#########
# Step 36
Code affected: FishTankManager constructor
Flaw: fishTankItems and newItems is not yet initialize in the constructor
Fix: Initialize these 2 in the constructor

#########
# Step 37
Code affected: FishTankManager.draw()
Flaw: Since we changed the coordinate system, we can need to change the implementation of draw()
depending on the different items.
Fix: Modifying the implementation of the body

#########
# Step 38
Code affected: FishTankManager.update()
Flaw: Since we changed the coordinate system, we can need to change the implementation of update()
depending on the different items.
Fix: Modifying the implementation of the body

#########
# Step 39
Code affected: FishTankManager.createTankItems()
Flaw: Since we changed the coordinate system, we need to change the implementation of createTankItems()
depending on the different items.
Fix: Modifying the implementation of the body

#########
# Step 40
Code affected: draw()
Flaw: For all the draw methods, the x and the y coordinate is flipped.
Fix: So, we flipped it back.

#########
# Step 41
Code affected: FishTankManager.removeItem(Items b)
Flaw: I need to create this new method to remove bubbles that will go out of bounds
Fix: Create it

#########
# Step 42
Code affected: FishTankManager.cleanFishTankItems()
Flaw: This new method is created to add bubbles and check whether any of the bubbles
out of bounds
Fix: Create this method

#########
# Step 43
Code affected: FishTankManager.update()
Flaw: cleanFishTankItems() hasn't been implemented in update()
Fix:Implement cleanFishTankItems() in update

#########
# Step 44
Code affected: Fish.reverseAppearance()
Flaw: There are way too many cases involved to flipped the symbols, even though
Fish appearance only have '<' and '>'.
Fix: Delete the irrelevant ones.

#########
# Step 45
Code affected: Fish.moveItem()
Flaw: Add a boundary to the fish, so it won't go out of the screen
Fix: Find the boundaries of the phone and if the fish passed it, turn it around.

#########
# Step 46
Code affected: FishTankManager.removeBubbles
Flaw: removeBubbles list is added to store the bubbles that are about to be out of bounds in a list
so they can be removed later.
Fix: Initialize removeBubbles in FishTankManager

#########
# Step 47
Code affected: Bubbles.moveItem()
Flaw: We need this to record the bubbles we need to remove.
Fix: Create a condition in which if the bubbles is almost out of bounds, add it into removeBubbles

######################
Adding a new Feature
######################

The feature that we will add is a Ground for the FishTank and a crab that will walk on the ground.
Also, the fish can defecate and it's feces will float down to the bottom and the crab will clean it
out.

#######################
1st Feature: The Ground
#######################

#########
# Step 1
Code affected: Create a class Ground that is a super class of Items
Flaw: This is needed to create Ground
Fix: Create it

#########
# Step 2
Code affected: Ground.appearance, paintText, and l
Flaw: We need these variables to initialize the appearance, color and the length of the sand.
Fix: Variable is initialised in Ground

#########
# Step 3
Code affected: Ground constructor
Flaw: We need a constructor to construct the Ground
Fix: Create a Ground constructor

#########
# Step 4
Code affected: Ground.draw()
Flaw: This is needed to draw the ground on the canvas
Fix: Implement this method

#########
# Step 5
Code affected: Ground.moveItem()
Flaw: Since Ground inherits from Item, Ground needs to implement moveItem(). However,
since there are nothing to be moved, we can simply leave it blank.
Fix: Since Ground inherits from Item, Ground needs to implement moveItem(). However,
    since there are nothing to be moved, we can simply leave it blank.

########################
2nd Feature: Poop
########################

#########
# Step 1
Code affected: Create class Poo that extends Items
Flaw: We need this to Create Fish Poo
Fix: Implement it

#########
# Step 2
Code affected: Make variables
Flaw: appearance, paintText is needed to control the feature of the poo
Fix: Implement it

#########
# Step 3
Code affected: Make a Poo Constructor
Flaw: This is needed to give the colour and the apperance and the coordinate of the poo
Fix: Implement it.

#########
# Step 4
Code affected: Poo.draw()
Flaw: This is needed so the poo is drawn on the canvas.
Fix: Implement it

#########
# Step 5
Code affected: Poo.moveItem()
Flaw: Move the fish poo so it floats down until it reach the ground.
Fix: Implement it.

########################
3rd Feature: Adding Crab
########################

#########
# Step 1
Code affected: Create Crab class that extends Items
Flaw: It is needed to create crab
Fix: Create it

#########
# Step 2
Code affected: Set up the needed variable in Crab
Flaw: apperance, goingRight, paintText is needed to control the features of the crab.
Fix: Make these variables

#########
# Step 3
Code affected: Crab constructor
Flaw: Needed to construct the crab
Fix: Implement constructor

#########
# Step 4
Code affected: Crab.turnAround()
Flaw: This is needed so the crab can walk into the opposite direction.
Fix: Implement it.

#########
# Step 5
Code affected: Crab.draw(Canvas canvas)
Flaw: This is needed so the crab can be drawn in the canvas
Fix: Implement it

#########
# Step 6
Code affected: moveItem()
Flaw: This is needed so we can control the movement of the crab,
Fix:

#########
# Step 7
Code affected: removePoop()
Flaw: If the Crab is in the position of the fish poo, the poo will be removed. Hence,
we need to add this particular poo in the removePoo list.
Fix: Implement this method

########################
Changes in FishTankManager to make our Features works
########################

#########
# Step 1
Code affected: Create an ArrayList bottomPoop and removePoop
Flaw: This is to store the fish Poo that is on the ground and the poo that needs will
be clean by the crab.
Fix: Implement it and Initialise it in the constructor

#########
# Step 2
Code affected: FishTankManager.update()
Flaw: remove the poop that is supposed to be remove
Fix: Implement it in update()

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:
#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:

#########
# Step
Code affected:
Flaw:
Fix:
